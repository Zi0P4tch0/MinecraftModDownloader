#!/usr/bin/env python

#################################################################################
#                                                                               #
# Copyright (c) 2016 Matteo Pacini                                              #
#                                                                               #
# Permission is hereby granted, free of charge, to any person obtaining a copy  #
# of this software and associated documentation files (the "Software"), to deal #
# in the Software without restriction, including without limitation the rights  #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell     #
# copies of the Software, and to permit persons to whom the Software is         #
# furnished to do so, subject to the following conditions:                      #
#                                                                               #
# The above copyright notice and this permission notice shall be included in    #
# all copies or substantial portions of the Software.                           #
#                                                                               #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,      #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE   #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER        #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN     #
# THE SOFTWARE.                                                                 #
#                                                                               #
#################################################################################

"""Minecraft Mod Downloader.
Written by Matteo Pacini <m@matteopacini.me>.
Licensed under MIT license.

Usage:
  mmd search <mod>
  mmd download [--minecraft-version=<version>] <mods>...
  mmd (-h | --help)
  mmd --version

Options:
  -h --help                         Show this screen.
  --version                         Show version.
  --minecraft-version=<version>     Desired Minecraft version [default: 1.7.10].

"""
from docopt import docopt

from bs4 import BeautifulSoup
from difflib import SequenceMatcher
from fake_useragent import UserAgent
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
import sys
from tabulate import tabulate
import urllib.request, urllib.parse, urllib.error

USER_AGENT = UserAgent().random

class Mod(object):

    def __init__(self, name, author, last_update, href):
        self.name = name
        self.author = author
        self.last_update = last_update
        self.href = 'https://mods.curse.com' + href

    def __str__(self):
        return '<Mod name="%s" author="%s" lastUpdate="%s">' % (self.name, self.author, self.last_update)

    def __repr__(self):
        return self.__str__()

    def to_tabulate_row(self):
        return [self.name, self.author, self.last_update]

def download_page(url):
    request = urllib.request.Request(url, headers={'User-Agent': USER_AGENT})
    response = urllib.request.urlopen(request)
    html = response.read()
    response.close()
    return html

def url_fix(s):
    scheme, netloc, path, qs, anchor = urllib.parse.urlsplit(s)
    path = urllib.parse.quote(path, '/%')
    qs = urllib.parse.quote_plus(qs, ':&=')
    return urllib.parse.urlunsplit((scheme, netloc, path, qs, anchor))

def download_file(url, output):
    request = urllib.request.Request(url_fix(url), headers={'User-Agent': USER_AGENT})
    response = urllib.request.urlopen(request)
    with open(output, 'wb') as f:
        f.write(response.read())
        f.flush()
    response.close()

def search_mod(mod, page=1):
    url = 'https://minecraft.curseforge.com/search/get-results?projects-page=%d&providerIdent=projects&search=%s' % (page, urllib.parse.quote(mod))
    soup = BeautifulSoup(download_page(url), 'html.parser')
    rows = soup.findAll('tr', {'class': 'results'})
    mods = []
    for row in rows:
        mod_name = row.findChildren('div', {'class':'results-name'})[0].findChildren('a')[0].string.strip()
        mod_author = row.findChildren('td', {'class':'results-owner'})[0].findChildren('a')[0].string.strip()
        mod_href = row.findChildren('div', {'class':'results-name'})[0].findChildren('a')[0]['href'].strip()
        mod_last_update = row.findChildren('td', {'class':'results-date'})[0].findChildren('abbr')[0].string.strip()
        mods.append(Mod(mod_name, mod_author, mod_last_update, mod_href))
    next_button = soup.findAll('a', text='Next')
    if len(next_button) == 0:
        return mods
    return mods + search_mod(mod, page=page+1)

def download_mod(mod, minecraft_version):
    mods = search_mod(mod)
    if len(mods) == 0:
        print('No such mod: "%s".' % mod)
    else:
        sorted_mods = sort_mods_by_similarity(mods, mod)
        download_link = find_best_available_download(sorted_mods[0].href, minecraft_version)
        if download_link is None:
            print('Could not find a version of the mod "%s" for Minecraft %s.' % (mod, minecraft_version))
        else:
            process_download_link(download_link)

def process_download_link(download_link):
    soup = BeautifulSoup(download_page(download_link), 'html.parser')
    download_link = soup.findAll('a', {'class': 'download-link'})[0]['data-href']
    download_filename = os.path.basename(os.path.normpath(download_link))
    download_file(download_link, download_filename)

def find_best_available_download(url, minecraft_version):
    if sys.platform == 'darwin':
        phantomjs_exe = '%s/phantomjs' % sys.platform
    elif sys.platform == 'win32':
        phantomjs_exe = '%s/phantomjs.exe' % sys.platform
    else:
        raise Exception('Unsupported platform: "%s".' % sys.platform)
    driver = webdriver.PhantomJS(executable_path=phantomjs_exe)
    driver.set_window_size(1280,720)
    driver.get(url)
    try:
        fucking_cookie_button = driver.find_element_by_xpath('/html/body/div[1]/div/a[1]')
        fucking_cookie_button.click()
    except:
        pass
    other_downloads_link = driver.find_element_by_xpath('//*[@id="about-project"]/div/ul/li[3]/a')
    other_downloads_link.click()
    WebDriverWait(driver, 10).until(
        EC.visibility_of_element_located((By.XPATH, '//*[@id="tab-other-downloads"]/div/div[2]/table/thead/tr/th[3]/a'))
    )
    sort_by_version_link = driver.find_element_by_xpath('//*[@id="tab-other-downloads"]/div/div[2]/table/thead/tr/th[3]/a')
    sort_by_version_link.click()
    while True:
        soup = BeautifulSoup(driver.page_source, 'html.parser')
        rows = soup.findAll('table', {'class': 'listing'})[0].findChildren('tbody')[0].findChildren('tr')
        for row in rows:
            columns = row.findChildren('td')
            mod_mc_version = columns[2].string
            if mod_mc_version == minecraft_version:
                driver.quit()
                return 'https://mods.curse.com' + columns[0].findChildren('a')[0]['href']
        try:
            next_button = driver.find_element_by_link_text('Next')
            next_button.click()
            WebDriverWait(driver, 10).until(
                EC.visibility_of_element_located((By.XPATH, '//*[@id="tab-other-downloads"]/div/div[2]/table/thead/tr/th[3]/a'))
            )
        except:
            break
    driver.quit()
    return None

def sort_mods_by_similarity(mods, mod):
    return sorted(mods, key=lambda x: SequenceMatcher(None, x.name, mod).ratio(), reverse=True)

def pretty_print_mods(mods):
    print(tabulate([x.to_tabulate_row() for x in mods], headers=['Mod', 'Author', 'Last Updated On']))

if __name__ == '__main__':
    arguments = docopt(__doc__, version='0.2')
    if arguments['search']:
        mods = search_mod(arguments['<mod>'])
        sorted_mods = sort_mods_by_similarity(mods, arguments['<mod>'])
        pretty_print_mods(sorted_mods)
    if arguments['download']:
        for mod in arguments['<mods>']:
            download_mod(mod, arguments['--minecraft-version'])
